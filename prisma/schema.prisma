// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Batch {
  id          String      @id @default(cuid())
  name        String
  title       String
  description String
  users       BatchUser[]
  User        User[]
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  createdAt     DateTime       @default(now()) @map(name: "created_at")
  updatedAt     DateTime       @updatedAt @map(name: "updated_at")
  batchId       String?
  Announcement  Announcement[]
  Resource      Resource[]
  accounts      Account[]
  sessions      Session[]
  Batch         Batch?         @relation(fields: [batchId], references: [id])
  BatchUser     BatchUser[]

  @@map(name: "users")
}

model BatchUser {
  userId  String
  batchId String
  user    User   @relation(fields: [userId], references: [id])
  batch   Batch  @relation(fields: [batchId], references: [id])

  @@id([userId, batchId]) // Composite primary key
}

model Announcement {
  id        Int      @id @default(autoincrement())
  content   String
  date      DateTime
  userId    String
  createdBy User     @relation(fields: [userId], references: [id])
}

model Resource {
  id        Int    @id @default(autoincrement())
  title     String
  pdf       String
  createdBy User   @relation(fields: [userId], references: [id])
  userId    String
}
